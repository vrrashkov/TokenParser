global: 
  # Figma variables source paths
  figma_variables_source_paths: 
    - "assets/figma/variables/light_variables.json"
    # - "assets/figma/variables/Dark.json"
    # - "assets/figma/variables/Light.json"
  # Figma studio source paths
  figma_studio_source_paths: 
    # - "assets/figma/studio/core.json"
    # - "assets/figma/studio/typography.json"
    # - "assets/figma/studio/global.json"
    # - "assets/figma/studio/mobile.json"
    # - "assets/figma/studio/dark.json"
    # - "assets/figma/studio/light.json"
  # Figma output calculated files, 
  # This will output the files
  # dark.json
  # light.json
  # core.json - (merged with typography, global)
  # mobile.json
  figma_output_paths:
    - combine:
      - "assets/figma/variables/light_variables.json"
    # - combine:
    #   - "assets/figma/variables/Dark.json"
    # - combine:
    #   - "assets/figma/variables/Light.json"
    # - combine:
    #   - "assets/figma/studio/dark.json"
    # - combine:
    #   - "assets/figma/studio/light.json"
    # - combine: 
    #   - "assets/figma/studio/core.json"
    #   - "assets/figma/studio/typography.json"
    #   - "assets/figma/studio/global.json"
    # - combine: 
    #   - "assets/figma/mobile.json"
  # Different themes path
  # The available paths are the ones created from figma_output_paths
  # In this case we can only access dark.json, light.json, core.json, mobile.json 
  output_paths:
    - combine:
      - "light_variables.json"
    # - combine:
    #   - "dark.json"
    #   - "core.json"
    #   - "mobile.json"
    # - combine:
    #   - "light.json"
    #   - "core.json"
    #   - "mobile.json"
  #Output path 
  style_output_path: "assets/generated_styles/"
templates:
  - settings_general:
      generate_file_path: "generated_templates"
      file_name:
        format: "cds-{style}"
        extension: "css"
        case: "kebab"
        #This will replace the class_name from template_type as well
        #use_as_class_name: true
    settings_custom:
      header: ":root {"
      #sub_header: "test sub header"
      #sub_footer: "test sub footer"
      footer: "}"
      # Only if class is set, class_name will be displayed
      #class: "public class"
      #class_name: "DSCore{style}"
      template_type:
        - type: color
          value: "let {{variable_name | camel}} = {{color | color: 'hex'}} {{description | optional: '// desc = %value'}}"
        - type: string
          value: "let {{variable_name | camel}} = CGFloat({{string}})  {{description | optional: '// desc = %value'}}"
        - type: float
          value: "let {{variable_name | camel}} = CGFloat({{float}})  {{description | optional: '// desc = %value'}}"
        # - type: text
        #   value: "text test = {{variable_name | kebab}} {{text}};"
        # - type: boolean
        #   value: "bool test = {{variable_name | pascal}} {{boolean}};"
        # - type: lineHeights
        #   value: "{{variable_name | kebab}} {{lineHeight}};"
        # - type: composition
        #   value: "{% if verticalPadding != '' %} test1: {{verticalPadding | optional: 'vertical-padding-test-first: %value'}} {% endif %}"
        # - type: composition
        #   value: "{% if height != '' %} height: {{height | optional: 'vertical-padding-test-first: %value'}} {% endif %}"
        # - type: composition
        #   value: "{% if verticalPadding != '' %} test2: {{verticalPadding | optional: 'vartical-padding-test-second: %value'}} {% endif %}"
        # - type: boxShadow
        #   value: 
        #     - "{{variable_name}} {{color-0 | color: 'hex'}} blur: {{blur-0}} x: {{x-0}}"
        #     - "{{variable_name}} {{color-0 | color: 'hex'}} {{color-1 | color: 'hex'}}  blur: {{blur-0}} x: {{x-0}} blur: {{blur-1}} x: {{x-1}}"
      # template_type:
      #   - type: typography
      #     value: "Typography: {{variable_name | kebab}}, {{fontFamily | optional: 'fontFamily: %value'}}, {{paragraphSpacing | optional: 'paragraphSpacing: %value'}}, {{paragraphIndent | optional: 'paragraphIndent: %value'}}, {{textCase | optional: 'textCase: %value'}}, {{textDecoration | optional: 'textDecoration: %value'}}"
      #   - type: paragraphSpacing
      #     value: "paragraphSpacing: {{variable_name | kebab}}, {{paragraphSpacing}}"
      #   - type: paragraphIndent
      #     value: "paragraphIndent: {{variable_name | kebab}}, {{paragraphIndent}}"
      #   - type: textCase
      #     value: "textCase: {{variable_name | kebab}}, {{textCase}}"
      #   - type: textDecoration
      #     value: "textDecoration: {{variable_name | kebab}}, {{textDecoration}}"
