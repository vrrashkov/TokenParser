global: 
  # Figma source paths
  # These are the pure files from Figma, they can contain aliases
  # For example if we have aliases we will need the actual value and not the alias
  # Separating different files is necessary in case there are duplicate trees but different values/aliases
  # So if we have button-md and button-big with the same trees but different values with aliases that need to be accesed from core.json
  # this should be the setup
  # Look at the figma/variables and figma/generated_styles for better understanding how it works
  figma_source_paths: 
    - combine:
        files:
          - "assets/figma/variables/color-light.json"
          - "assets/figma/variables/color-dark.json"
    - combine:
        files:
        - "assets/figma/variables/button-md.json"
        - "assets/figma/variables/core.json"
    - combine:
        files:
        - "assets/figma/variables/button-big.json"
        - "assets/figma/variables/core.json"
  # file_name: If set this will be the name of the merged file
  # if not, than the first file name will be used
  figma_output_paths:
    - combine:
        file_name: "color-light"
        files:
          - "assets/figma/variables/color-light.json"
    - combine:
        file_name: "color-dark"
        files:
          - "assets/figma/variables/color-dark.json"
    - combine:
        file_name: "button-md"
        files:
          - "assets/figma/variables/button-md.json"
    - combine:
        file_name: "button-big"
        files:
          - "assets/figma/variables/button-big.json"
  # Generated files
  # You can combine multiple files also 
  output_paths:
    - combine:
        files:
          - "color-light"
    - combine:
        files:
          - "color-dark"
    - combine:
        files:
          - "button-md"
    - combine:
        files:
          - "button-big"
  #Output path 
  style_output_path: "assets/generated_styles/"
templates:
  - settings_general:
      generate_file_path: "generated_templates"
      file_name:
        format: "DS{{style}}"
        extension: "swift"
        #case: "kebab"
    settings_custom:
      # For header and footer {{style}} is a secial variable that can be used
      header: 
        - "import SwiftUI"
        - "public class DSCore{{style}} {"
      footer: 
        - "}"
      template_type:
        # For themes
        - type: color
          value: "public static let {{variable_name | camel}} = {{value | color: 'Color(red: rgb_r_v1, green: rgb_g_v1, blue: rgb_b_v1, opacity: rgb_a_v1)'}}  {{description | optional: '// desc = %value'}}"
        # For Core
        - type: string
          value: "public static let {{variable_name | camel}} = {{value}}  {{description | optional: '// desc = %value'}}"   
        - type: float
          value: "public static let {{variable_name | camel}} = CGFloat({{value | as_text_or_number}})  {{description | optional: '// desc = %value'}}"   
        - type: boolean
          value: "public static let {{variable_name | camel}} = {{value}}  {{description | optional: '// desc = %value'}}"   
        - type: composition
          value: "{% if verticalPadding != '' %} test1: {{verticalPadding | optional: 'vertical-padding-test-first: %value'}} {% endif %}"
        - type: composition
          value: "{% if verticalPadding != '' %} test2: {{verticalPadding | optional: 'vartical-padding-test-second: %value'}} {% endif %}"
        - type: boxShadow
          value: 
            - "{{variable_name}} {{color-0 | color: 'hex'}} blur: {{blur-0}} x: {{x-0}}"
            - "{{variable_name}} {{color-0 | color: 'hex'}} {{color-1 | color: 'hex'}}  blur: {{blur-0}} x: {{x-0}} blur: {{blur-1}} x: {{x-1}}"